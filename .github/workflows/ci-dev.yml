name: 00 CI Development

on:
  workflow_call:
  workflow_dispatch:
  push:
    branches-ignore:
      - 'main'
    paths-ignore:
      - '**/".md'
      - '**/".txt'
  pull_request:
    branches:
      - 'main'
    types: [opened]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  build:
    name: Build Maven
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
      packages: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Test with Maven
        run: mvn package --batch-mode

      - name: Copy test results
        if: always()
        run: mkdir test-results && cp target/*-reports/TEST-*.xml test-results

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            test-results/**/*.xml
          check_name: "Unit Test Results"
          comment_title: "Unit Test Results"

      - name: Save compiled artifact
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: target/*.jar
          retention-days: 1

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v3
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v2

  codequality:
    name: Check Code Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify -Pcoverage org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=nag-it_${{ github.event.repository.name }}

  license-finder:
    name: License Finder
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: License Finder fix
        run: rm mvnw

      - name: License Finder
        uses: jmservera/license-finder-action@v0.1.4-alpha
        with:
          permitted-licenses: MIT,Apache-2.0
          approved-dependencies: jquery,bootstrap

      - name: Publish license results
        uses: EnricoMi/publish-unit-test-result-action@v2.0.0
        if: always()
        with:
          junit_files: "license_finder_report.xml"
          check_name: "License Finder Results"
          comment_title: "License Finder Results"

      - name: Upload Dependency Review Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: license-finder-report
          path: license_finder_report.xml

  sast-codeql:
    name: SAST CodeQL
    permissions:
      checks: write
      security-events: write
      actions: read
      contents: read
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: java

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn clean package -B -Dmaven.test.skip

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:java"

  docker:
    name: Build Docker Image
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    needs: build
    outputs:
      image-name-with-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download application binary
      uses: actions/download-artifact@v3.0.0
      with:
        name: app
        path: target

    - name: Log in to the Container Registry
      uses: docker/login-action@v2.1.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4.1.0
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v3.2.0
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  container-image-scan:
    name: Container Image Scan
    permissions:
      checks: write
      security-events: write
      actions: read
      contents: read
      packages: read
    runs-on: ubuntu-latest
    needs: docker
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Log in to the Container Registry
      uses: docker/login-action@v2.1.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull Image
      run: docker pull ${{ needs.docker.outputs.image-name-with-tag }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.7.1
      with:
        image-ref: ${{ needs.docker.outputs.image-name-with-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        hide-progress: false
        timeout: 10m

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
